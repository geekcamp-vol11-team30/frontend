/**
 * @fileoverview gRPC-Web generated client stub for geekCamp
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.0-rc2
// source: protocol/event.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as protocol_event_pb from '../protocol/event_pb';


export class EventClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetEvent = new grpcWeb.MethodDescriptor(
    '/geekCamp.Event/GetEvent',
    grpcWeb.MethodType.UNARY,
    protocol_event_pb.GetEventRequest,
    protocol_event_pb.GetEventResponse,
    (request: protocol_event_pb.GetEventRequest) => {
      return request.serializeBinary();
    },
    protocol_event_pb.GetEventResponse.deserializeBinary
  );

  getEvent(
    request: protocol_event_pb.GetEventRequest,
    metadata: grpcWeb.Metadata | null): Promise<protocol_event_pb.GetEventResponse>;

  getEvent(
    request: protocol_event_pb.GetEventRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocol_event_pb.GetEventResponse) => void): grpcWeb.ClientReadableStream<protocol_event_pb.GetEventResponse>;

  getEvent(
    request: protocol_event_pb.GetEventRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocol_event_pb.GetEventResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/geekCamp.Event/GetEvent',
        request,
        metadata || {},
        this.methodDescriptorGetEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/geekCamp.Event/GetEvent',
    request,
    metadata || {},
    this.methodDescriptorGetEvent);
  }

  methodDescriptorCreateEvent = new grpcWeb.MethodDescriptor(
    '/geekCamp.Event/CreateEvent',
    grpcWeb.MethodType.UNARY,
    protocol_event_pb.CreateEventRequest,
    protocol_event_pb.CreateEventResponse,
    (request: protocol_event_pb.CreateEventRequest) => {
      return request.serializeBinary();
    },
    protocol_event_pb.CreateEventResponse.deserializeBinary
  );

  createEvent(
    request: protocol_event_pb.CreateEventRequest,
    metadata: grpcWeb.Metadata | null): Promise<protocol_event_pb.CreateEventResponse>;

  createEvent(
    request: protocol_event_pb.CreateEventRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocol_event_pb.CreateEventResponse) => void): grpcWeb.ClientReadableStream<protocol_event_pb.CreateEventResponse>;

  createEvent(
    request: protocol_event_pb.CreateEventRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocol_event_pb.CreateEventResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/geekCamp.Event/CreateEvent',
        request,
        metadata || {},
        this.methodDescriptorCreateEvent,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/geekCamp.Event/CreateEvent',
    request,
    metadata || {},
    this.methodDescriptorCreateEvent);
  }

  methodDescriptorRegisterAnswer = new grpcWeb.MethodDescriptor(
    '/geekCamp.Event/RegisterAnswer',
    grpcWeb.MethodType.UNARY,
    protocol_event_pb.RegisterAnswerRequest,
    protocol_event_pb.RegisterAnswerResponse,
    (request: protocol_event_pb.RegisterAnswerRequest) => {
      return request.serializeBinary();
    },
    protocol_event_pb.RegisterAnswerResponse.deserializeBinary
  );

  registerAnswer(
    request: protocol_event_pb.RegisterAnswerRequest,
    metadata: grpcWeb.Metadata | null): Promise<protocol_event_pb.RegisterAnswerResponse>;

  registerAnswer(
    request: protocol_event_pb.RegisterAnswerRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocol_event_pb.RegisterAnswerResponse) => void): grpcWeb.ClientReadableStream<protocol_event_pb.RegisterAnswerResponse>;

  registerAnswer(
    request: protocol_event_pb.RegisterAnswerRequest,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocol_event_pb.RegisterAnswerResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/geekCamp.Event/RegisterAnswer',
        request,
        metadata || {},
        this.methodDescriptorRegisterAnswer,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/geekCamp.Event/RegisterAnswer',
    request,
    metadata || {},
    this.methodDescriptorRegisterAnswer);
  }

}

